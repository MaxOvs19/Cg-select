{"mappings":"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","sources":["src/components/utils.js","src/components/create-element.js","src/index.js","src/cg-dropdown.js"],"sourcesContent":["/**\n * Utils module\n * @module Utils\n */\n\n/**\n * Создание кнопки выбора элементов\n * @param {HTMLElement} element созданный экземпляр класса DropDown\n * @param {string} content placeholer передаваемый из настроек селекта\n * @param {object} styles не обязательный параметр. Объект в котором находяться настройки кастомизации частей селекта\n */\nexport function createSelected(element, content, styles) {\n  if (content) {\n    element.innerHTML = `\n      <div class=\"cg-select\">\n         <p class=\"selected\">${content}</p>\n          <div class=\"caret\"></div>\n       </div>\n      `;\n  }\n\n  if (styles) {\n    customStyles(element, styles);\n\n    element.innerHTML = `\n      <div class=\"cg-select\" style = \"${styles}\">\n          <p class=\"selected\" style = \"${styles}\">${content}</p>\n          <div class=\"caret\" style = \"${styles}\"></div>\n      </div>\n    `;\n  }\n}\n\n/**\n * Поиск и стилизация елементов полученных из styles экземпляра DropDown\n * @param {HTMLElement} element созданный экземпляр класса DropDown\n * @param {object} styles объект в котором находяться настройки кастомизации частей селекта\n */\nexport function customStyles(element, styles) {\n  if (!styles) {\n    return;\n  }\n\n  const { head, caret, placeholder } = styles;\n\n  const cgSelect = element.querySelector('.cg-select');\n  const caretSelect = element.querySelector('.caret');\n  const placeholderSelect = element.querySelector('.selected');\n\n  customStylesFormat(head, cgSelect);\n\n  customStylesFormat(caret, caretSelect);\n\n  if (placeholderSelect) {\n    customStylesFormat(placeholder, placeholderSelect);\n  }\n}\n\n/**\n * Универсальный метод для стилизации селекта\n * @param {object} elemOption объект полученное из объекта styles у которого мы получаем ключ-значение стилей\n * @param {HTMLElement} selector  HTMLElement подвергающиеся кастомизации\n */\nexport function customStylesFormat(elemOption, selector) {\n  if (elemOption) {\n    Object.entries(elemOption).forEach(([key, value]) => {\n      selector.style[key] = value;\n    });\n  }\n}\n\n/**\n * Проверка содержит ли item  указанные свойства,\n * @param {object} item проверяемый на определенную структуру элемент\n * @returns {boolean} возвращает true/false если item содержит указанные свойства\n */\nexport function checkItemStruct(item) {\n  if (item && typeof item !== 'object') {\n    return false;\n  }\n\n  return item.hasOwnProperty('id') && item.hasOwnProperty('title') && item.hasOwnProperty('value');\n}\n\n/**\n * Преобразование каждого елемента полученного из поля Items;\n * @param {object | string} dataItem полученный елемент переданный при создании селекта может быть как object/string\n * @param {number} index индекс этого элемента\n * @returns {object} возвращает сформированный объект\n */\nexport function getFormatItem(dataItem, index) {\n  const random = Math.random().toString(36).substring(2, 10);\n  let item = {};\n\n  if (checkItemStruct(dataItem)) {\n    item = {\n      id: dataItem.id,\n      title: dataItem.title,\n      value: index,\n    };\n  } else {\n    item = {\n      id: random,\n      title: dataItem,\n      value: index,\n    };\n  }\n\n  return item;\n}\n\n/**\n * Поведение нативного(одинарного) селекта при выборе кастомного\n * @param {NodeList} element NodeList нативного селекта\n * @param {object} item выбранный элемент в кастомном селекте\n */\nexport function nativOptionOrdinary(element, item) {\n  element.forEach((option) => {\n    option.removeAttribute('selected');\n    if (option.textContent === item) {\n      option.setAttribute('selected', 'selected');\n    }\n  });\n}\n\n/**\n * Поведение нативного(Multiple) селекта при выборе в кастомном\n * @param {NodeList} element NodeList нативного селекта\n * @param {object} item выбранный элемент в кастомном селекте\n * @param {boolean} condition специальный флаг при котором добавляются/убераются атрибуты у нативного селекта\n */\nexport function nativOptionMultiple(element, item, condition) {\n  element.forEach((option) => {\n    if (condition == true) {\n      if (option.textContent === item) {\n        option.setAttribute('selected', 'selected');\n      }\n    } else if (condition == false) {\n      if (option.textContent === item) {\n        option.removeAttribute('selected');\n      }\n    } else {\n      return;\n    }\n  });\n}\n","import { customStylesFormat, nativOptionMultiple } from './utils';\n/**\n * @module createBreadcrumb\n */\n\n/**\n * Метод который создает и отвечает за поведение chips\n * @param {object} data объект в котором содержатся настройки и элементы селекта\n * @param {string} title имя выбранного элемента для отрисовки chips\n * @param {number} index индекс выбранного элемента для отрисовки chips\n * @param {string} id уникальное id выбранного элемента\n * @returns {HTMLElement} возвращает сформированный HTMLElement chips item\n */\nexport function createBreadcrumb(data, title, index, id) {\n  const { element, option, indexes, selectedItems } = data;\n  const { placeholder, styles } = option;\n\n  const selected = element.querySelector('.selected');\n  const nativOption = element.querySelectorAll('.nativSelect__nativOption');\n\n  const liChip = document.createElement('li');\n  const textNode = document.createTextNode(title);\n  const svgIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  const path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  const path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n  svgIcon.setAttribute('viewBox', '0 0 10 10');\n  path1.setAttribute('d', 'M3,7 L7,3');\n  path2.setAttribute('d', 'M3,3 L7,7');\n  liChip.setAttribute('id', `tag-${index}-${id}`);\n\n  svgIcon.classList.add('svg-icon');\n\n  svgIcon.appendChild(path1);\n  svgIcon.appendChild(path2);\n  liChip.appendChild(textNode);\n  liChip.appendChild(svgIcon);\n\n  if (styles) {\n    const { chips } = styles;\n    customStylesFormat(chips, liChip);\n  }\n\n  svgIcon.addEventListener('click', (event) => {\n    event.stopPropagation();\n    nativOptionMultiple(nativOption, title, false);\n\n    const deleteIcon = indexes.indexOf(index);\n    let checkBox = '';\n\n    indexes.splice(deleteIcon, 1);\n    selectedItems.splice(deleteIcon, 1);\n\n    if (id) {\n      checkBox = document.getElementById(`chbox-${id}`);\n    } else {\n      checkBox = document.getElementById(`chbox-${index}`);\n    }\n\n    checkBox.checked = false;\n    checkBox.parentElement.classList.remove('active');\n\n    if (!selectedItems.length) {\n      selected.innerText = placeholder;\n    }\n\n    liChip.parentElement.removeChild(liChip);\n  });\n\n  return liChip;\n}\n\nexport function createNativeSelect() {\n  const nativSelect = document.createElement('select');\n\n  nativSelect.setAttribute('form', 'data');\n  nativSelect.setAttribute('name', 'dataSelect');\n  nativSelect.classList.add('nativSelect');\n  return nativSelect;\n}\n\nexport function createNativSelectOption() {\n  const nativOption = document.createElement('option');\n\n  nativOption.classList.add('nativSelect__nativOption');\n  return nativOption;\n}\n","import { DropDown } from './cg-dropdown';\n\n// ------------------------------Обычный селект--------------------\nconst dropdown = new DropDown({\n  selector: '.cg-dropdown_one',\n  placeholder: 'Выберите авто',\n  items: [\n    'BMW',\n    {\n      id: '213sade',\n      title: 'Opel',\n      value: 1,\n    },\n    'Mersedes',\n    'MAN',\n    'max',\n  ],\n  multiselect: true,\n  multiselectTag: true,\n});\n\ndropdown.disabled(false);\n// ------------------------------URL--------------------\n// const dropdown3 = new DropDown({\n//   selector: '.cg-dropdown_three',\n//   placeholder: 'URL',\n//   url: 'http://jsonplaceholder.typicode.com/users',\n//   styles: {\n//     head: {\n//       background: 'black',\n//       width: '350px',\n//     },\n//   },\n//   multiselect: true,\n//   multiselectTag: true,\n// });\n\n// --------------------------------Категории--------------------------\n// const dropdown4 = new DropDown({\n//   selector: '.cg-dropdown_button',\n//   placeholder: 'Выберите регион',\n//   items: [\n//     {\n//       category: 'Russia',\n//       categoryItems: [\n//         {\n//           id: '28qwds',\n//           title: 'Москва',\n//           value: 0,\n//         },\n//         ,\n//         'Ростов-на-дону',\n//         'Саратов',\n//         'Волгоград',\n//         'Донецк',\n//       ],\n//     },\n//     {\n//       category: 'USA',\n//       categoryItems: ['Alabama', 'Texas', 'Colorado', 'Klirens', 'Los-Angeles'],\n//     },\n//     {\n//       category: 'France',\n//       categoryItems: ['Paris'],\n//     },\n//   ],\n//   styles: {\n//     head: {\n//       background: 'red',\n//     },\n//     list: {\n//       background: 'green',\n//     },\n//     chips: {\n//       background: 'blue',\n//     },\n//   },\n//   multiselect: true,\n//   multiselectTag: true,\n// });\n\n//----------------управление с помощью кнопок----------------------------------\n/* const buttonOpen = document.querySelector('.button__open');\n const buttonClose = document.querySelector('.button__close');\n\n dropdown4.buttonControl(buttonOpen, 'open');\n dropdown4.buttonControl(buttonClose, 'close'); \n */\n","import {\n  createSelected,\n  customStyles,\n  getFormatItem,\n  customStylesFormat,\n  nativOptionMultiple,\n  nativOptionOrdinary,\n} from './components/utils';\nimport {\n  createBreadcrumb,\n  createNativSelectOption,\n  createNativeSelect,\n} from './components/create-element';\n\n/**\n * @class Описание класса DropDown\n * @description Этот класс реализовывает функционал кастомного селекта, с возможностями кастомизации.\n *@author Овсяников Максим\n */\nexport class DropDown {\n  /**\n   * Созданный HTML елемент\n   * @type {HTMLElement}\n   */\n  #element;\n  /**\n   * Созданный список(ul), с классом list\n   * @type {HTMLElement}\n   */\n  #list;\n  /**\n   * Настройки селекта передаваемые при создании экземпляра класса\n   * @type {object}\n   */\n  #options;\n  /**\n   * Переменная для управления каретки\n   * @type {HTMLElement}\n   */\n  #caret;\n  /**\n   * Массив переданных элементов\n   * @type {object[]}\n   */\n  #items;\n  /**\n   * Переданные категории\n   * @type {string}\n   */\n  #category;\n  /**\n   * Выбранный или массив выбранных элементов из списка\n   * @type {object[] | object}\n   */\n  #selectedItems;\n  /**\n   * Массив индексов выбранных элементов\n   * @type {number[]}\n   */\n  #indexes = [];\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @returns {string[] | string | null} Возвращает выбранные элемент(ы) в виде массива/элемента/null\n   * @description Геттер возвращающий выбранные элемент(ы) селекта\n   */\n  get value() {\n    return this.#selectedItems ?? null;\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @returns {number | number[]}Возвращает индексы выбранных элемента(ов) в виде массива/пустой массив\n   * @description Геттер возвращающий индексы выбранных элемента(ов) селекта\n   */\n  get indexes() {\n    return this.#indexes ?? [];\n  }\n\n  /**\n   *\n   * @param {object} options Объект принимающий настройки селекта\n   * @constructor Конструктор класса DropDown\n   * @description  Конструктор принимает объект и рендерит селект.\n   * @example\n   * options = {\n   *  selector: 'Уникальный селектор',\n      selected: 'Выбранный элемент',\n      placeholder: '...',\n      items: [string|number|object],\n      styles: {\n        head: {\n          background: '...',\n        },\n        list: {...},\n        chips: {...},\n        caret: {...},\n        placeholder: {...},\n      },\n      event: '...',\n      url: 'http/...',\n      multiselect: true/false,\n      multiselectTag: true/false,\n   * }\n     \n   */\n  constructor(options = {}) {\n    this.#init(options);\n    this.#render();\n    this.#initEvent();\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @param {string | object} item добавляемый елемент\n   * @description добавляет переданный элемент в конец списка и перерисовывает список. Не может использоваться при передачи элементов с категорями\n   * @method addItem\n   */\n  addItem(item) {\n    if (this.#category) {\n      console.log('can`t add item to category');\n      return;\n    }\n\n    if (!item) {\n      return false;\n    }\n\n    const index = this.#items.length;\n\n    this.#items.push(getFormatItem(item, index));\n    this.#render();\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @param {number} index индекс удаляемого элемента\n   * @description удаляет елемент по индексу из списка и перерисовывает его. Не может использоваться при передачи элементов с категорями.\n   * @method deleteItem\n   */\n  deleteItem(index) {\n    if (this.#category) {\n      console.log('can`t add item to category');\n      return;\n    }\n\n    const item = this.#items[index];\n\n    this.#items.splice(index, 1);\n    this.#render();\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @description удаляет все елементы из списка и перерисовывает его.\n   * @method deleteItemAll\n   */\n  deleteItemAll() {\n    this.#items.splice(0, this.#items.length);\n    this.#render();\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @param {number} index индекс выбранного элемента\n   * @description  выбирает элемент который будет изначально отрисовываться в селекте\n   * @method selectIndex\n   */\n  selectIndex(index) {\n    if (this.#category) {\n      console.log('can`t add item to category');\n      return;\n    }\n\n    const options = this.#element.querySelectorAll('.list__item');\n\n    if (index > options.length) {\n      return;\n    }\n\n    const select = options[index].innerText;\n    this.#render(select);\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @param {number} numberItem номер возвращаемого элемента\n   * @returns {HTMLElement} возвращает ссылку на выбранный HTML элемент\n   * @method getElement\n   */\n  getElement(numberItem) {\n    if (numberItem > this.#items.length) {\n      return;\n    }\n    return this.#items[numberItem];\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @param {boolean} value - Передаваемый параметр для добавления атрибута disabled;\n   * @description Метод позволяющий переключать состояние селекта disabled,\n   * @method disabled\n   */\n  disabled(value) {\n    if (typeof value !== 'boolean') {\n      return;\n    }\n\n    const select = this.#element.querySelector('.cg-select');\n    if (value === true) {\n      this.#element.setAttribute('disabled', true);\n      select.classList.add('disabled');\n    } else {\n      this.#element.removeAttribute('disabled');\n      select.classList.remove('disabled');\n    }\n  }\n\n  /**\n   * Метод экземпляра класса DropDown\n   * @param {HTMLInputElement} button - HTML кнопка\n   * @param {string} method - метод открытия open/close\n   * @description Метод позволяющий открывать/закрывать селект с помощью кнопок\n   * @method buttonControl\n   */\n  buttonControl(button, method) {\n    button.addEventListener('click', () => {\n      if (method === 'open') {\n        this.#open(true);\n      } else if (method === 'close') {\n        this.#close();\n      } else {\n        return;\n      }\n    });\n  }\n\n  /**\n   * Приватный метод инициализации экземпляра класса DropDown\n   * @method #init\n   * @member\n   * @protected\n   * @param {object} options передаваемые настройки селекта\n   * @description Приватный метод. Общая инициализация селекта. Получение настоек и преобразвание элементов селекта.\n   * @example\n   *  {\n        selector: '.cg-dropdown_one',\n        placeholder: 'Выберите авто',\n        items: [\n          'BMW',\n          {\n            id: '213sade',\n            title: 'Opel',\n            value: 1,\n          },\n          'Mersedes',\n          'MAN',\n          'max',\n        ],\n        multiselect: true,\n        multiselectTag: true,\n      }\n   */\n  #init(options) {\n    this.#options = options;\n    const { items, multiselect, url } = this.#options;\n\n    const elem = document.querySelector(options.selector);\n\n    if (!elem) {\n      throw new Error(`Element with selector ${options.selector}`);\n    }\n\n    this.#element = elem;\n\n    this.#element.addEventListener('click', () => {\n      this.#open();\n    });\n\n    this.#items = [];\n\n    if (multiselect) {\n      this.#selectedItems = [];\n    }\n\n    if (!items && url) {\n      this.#renderUrl();\n      return;\n    }\n\n    items.forEach((dataItem, index) => {\n      if (dataItem.category && dataItem.categoryItems) {\n        this.#category = dataItem.category;\n\n        this.#items.push(this.#category);\n        dataItem.categoryItems.forEach((categoryItem, indexCategory) => {\n          this.#items.push(getFormatItem(categoryItem, indexCategory));\n        });\n      } else {\n        this.#items.push(getFormatItem(dataItem, index));\n      }\n    });\n  }\n\n  /**\n   * Привaтный метод экземпляра класса DropDown\n   *\n   * @method #initSelected\n   * @param {string} select необязательный елемент. Используется в методе selectIndex\n   * @description Отрисовывает и стилизует селект\n   * @protected\n   */\n  #initSelected(select) {\n    const { styles, selected, placeholder } = this.#options;\n\n    if (selected) {\n      createSelected(this.#element, selected);\n    } else if (placeholder) {\n      createSelected(this.#element, placeholder);\n    } else {\n      createSelected(this.#element, 'Select...');\n    }\n\n    if (styles) {\n      customStyles(this.#element, styles);\n    }\n\n    if (select) {\n      createSelected(this.#element, select, styles);\n    }\n  }\n\n  /**\n   * Приватный метод рендера экземпляра класса DropDown\n   *@protected\n   * @method #render\n   * @param {string} select  необязательный елемент. Передаеться в метод initSelected\n   * @description Рендер елементов в селекте.\n   */\n  #render(select) {\n    const { styles, multiselect } = this.#options;\n\n    if (select || (select && styles)) {\n      this.#initSelected(select);\n      customStyles(this.#element, styles);\n    } else {\n      this.#initSelected();\n    }\n\n    const ulList = document.createElement('ul');\n    const nativSelect = createNativeSelect();\n\n    ulList.classList.add('list');\n\n    if (styles) {\n      const { list } = styles;\n      customStylesFormat(list, ulList);\n    }\n\n    this.#element.appendChild(ulList);\n    this.#element.appendChild(nativSelect);\n\n    this.#items.forEach((dataItem) => {\n      const liItem = document.createElement('li');\n      const nativOption = createNativSelectOption();\n      const strongItem = document.createElement('strong');\n\n      liItem.classList.add('list__item');\n      strongItem.classList.add('category');\n\n      if (multiselect) {\n        const checkBox = document.createElement('input');\n        checkBox.type = 'checkbox';\n        checkBox.setAttribute('id', `chbox-${dataItem.id}`);\n\n        liItem.appendChild(checkBox);\n        nativSelect.setAttribute('multiple', 'multiple');\n      }\n\n      let textNode = '';\n\n      if (dataItem.title) {\n        nativOption.text = dataItem.title;\n        nativOption.value = dataItem.title;\n        textNode = document.createTextNode(dataItem.title);\n\n        nativSelect.appendChild(nativOption);\n        liItem.appendChild(textNode);\n        ulList.appendChild(liItem);\n      } else {\n        textNode = document.createTextNode(dataItem);\n        strongItem.appendChild(textNode);\n        ulList.appendChild(strongItem);\n      }\n    });\n\n    this.#items.filter((item, index) => {\n      if (typeof item !== 'object') {\n        this.#items.splice(index, 1);\n      }\n      return item;\n    });\n\n    this.#addOptionsBehaviour();\n  }\n\n  /**\n   * Приватный метод рендера экземпляра класса DropDown\n   *@protected\n   * @method #renderUrl\n   * @description Рендер елементов в селекте переданных с URL и их настойка\n   */\n  async #renderUrl() {\n    const { url, items, multiselect } = this.#options;\n\n    if (items) {\n      return;\n    }\n\n    if (!url) {\n      return;\n    }\n\n    const response = await fetch(url);\n    const dataUrl = await response.json();\n\n    dataUrl.forEach((dataItem, index) => {\n      const item = {\n        id: dataItem.id,\n        title: dataItem.name,\n        value: index,\n      };\n      const ulUrl = this.#element.querySelector('.list');\n      const nativSelect = createNativeSelect();\n      const nativOption = createNativSelectOption();\n      const liUrl = document.createElement('li');\n      const textUrl = document.createTextNode(item.title);\n\n      if (multiselect) {\n        const checkBox = document.createElement('input');\n        checkBox.type = 'checkbox';\n\n        checkBox.setAttribute('id', `chbox-${item.id}`);\n        nativSelect.setAttribute('multiple', 'multiple');\n\n        liUrl.appendChild(checkBox);\n      }\n\n      liUrl.classList.add('list__item');\n      nativOption.value = dataItem.title;\n      nativOption.text = dataItem.title;\n\n      liUrl.appendChild(textUrl);\n      ulUrl.appendChild(liUrl);\n\n      this.#items.push(item);\n    });\n\n    this.#items.filter((item, index) => {\n      if (typeof item !== 'object') {\n        this.#items.splice(index, 1);\n      }\n      return item;\n    });\n\n    this.#addOptionsBehaviour();\n  }\n\n  /**\n   * Приватный метод экземпляра класса DropDown\n   * @protected\n   * @param {boolean} oneClick необязательный параметр передаваемый из функции buttonControl\n   * @description Открывает список для выбора элемента\n   * @method #open\n   */\n  #open(oneClick) {\n    this.#list = this.#element.querySelector('.list');\n    this.#caret = this.#element.querySelector('.caret');\n\n    if (oneClick === true) {\n      this.#list.classList.add('open');\n      this.#caret.classList.add('caret_rotate');\n    } else {\n      this.#list.classList.toggle('open');\n      this.#caret.classList.toggle('caret_rotate');\n    }\n  }\n\n  /**\n   * Приватный метод экземпляра класса DropDown\n   * @protected\n   * @description Закрывает список\n   * @method #close\n   */\n  #close() {\n    this.#list.classList.remove('open');\n    this.#caret.classList.remove('caret_rotate');\n  }\n\n  /**\n   * Приватный метод экземпляра класса DropDown\n   * @protected\n   * @description Метод реализовывающий выбор элементов в разных режимах. Обычный/Мультиселект/Мультиселект + Мультиселект Таг.\n   * @method #addOptionsBehaviour\n   */\n  #addOptionsBehaviour() {\n    const { multiselect, placeholder, selected, multiselectTag } = this.#options;\n\n    const options = this.#element.querySelectorAll('.list__item');\n    const select = this.#element.querySelector('.selected');\n    const nativOption = this.#element.querySelectorAll('.nativSelect__nativOption');\n\n    const ulMultipul = document.createElement('ul');\n\n    if (multiselect) {\n      ulMultipul.classList.add('multiselect-tag');\n      select.classList.add('overflow-hidden');\n    }\n\n    options.forEach((option, index) => {\n      option.addEventListener('click', (event) => {\n        const item = this.#items[index];\n\n        if (multiselect) {\n          event.stopPropagation();\n          option.classList.toggle('active');\n\n          const checkBox = option.querySelector('input[type=\"checkbox\"]');\n\n          if (checkBox) {\n            if (!(event.target instanceof HTMLInputElement)) {\n              checkBox.checked = !checkBox.checked;\n            }\n\n            const checkIndex = this.#indexes.indexOf(index);\n\n            if (checkIndex === -1) {\n              nativOptionMultiple(nativOption, item.title, true);\n\n              this.#indexes.push(index);\n\n              select.innerText = '';\n\n              if (multiselectTag) {\n                this.#selectedItems.push(item);\n                select.appendChild(ulMultipul);\n\n                const data = {\n                  option: this.#options,\n                  element: this.#element,\n                  indexes: this.#indexes,\n                  selectedItems: this.#selectedItems,\n                };\n\n                ulMultipul.appendChild(createBreadcrumb(data, item.title, index, item.id));\n              } else {\n                this.#selectedItems.push(item.title);\n                select.innerText = this.#selectedItems;\n              }\n            } else {\n              if (multiselectTag) {\n                const tagItem = document.getElementById(`tag-${index}-${item.id}`);\n                ulMultipul.removeChild(tagItem);\n              }\n              this.#indexes.splice(checkIndex, 1);\n              this.#selectedItems.splice(checkIndex, 1);\n              nativOptionMultiple(nativOption, item.title, false);\n            }\n\n            if (!this.#selectedItems.length) {\n              if (placeholder) {\n                select.innerText = placeholder;\n              } else if (selected) {\n                select.innerText = selected;\n              } else {\n                select.innerText = 'Select...';\n              }\n            } else {\n              if (multiselectTag) {\n                select.appendChild(ulMultipul);\n              } else {\n                select.innerText = this.#selectedItems;\n              }\n            }\n          }\n        } else {\n          select.innerText = item.title;\n          this.#selectedItems = item;\n          nativOptionOrdinary(nativOption, item.title);\n\n          options.forEach((option) => {\n            option.classList.remove('active');\n          });\n          option.classList.add('active');\n        }\n      });\n    });\n  }\n\n  /**\n   * Приватный метод экземпляра класса DropDown\n   * @protected\n   * @description Открывает и закрывает список по переданному эвенту\n   * @method #initEvent\n   */\n  #initEvent() {\n    const { event } = this.#options;\n    if (!event) {\n      return;\n    }\n\n    if (event) {\n      if (event === 'mouseenter') {\n        this.#element.addEventListener(event, () => {\n          this.#open();\n        });\n        this.#element.addEventListener('mouseleave', () => {\n          this.#close();\n        });\n      }\n    }\n  }\n}\n"],"names":["$f6da4b2cbaf1787a$export$31b5fa56cc6048cb","element","content","styles","innerHTML","$f6da4b2cbaf1787a$export$edf5b2501a573922","head","caret","placeholder","cgSelect","querySelector","caretSelect","placeholderSelect","$f6da4b2cbaf1787a$export$5f8f940a0de3e7d","elemOption","selector","Object","entries","forEach","key","value","style","$f6da4b2cbaf1787a$export$b2e1d36bc0be1b2f","dataItem","index","random","Math","toString","substring","item","hasOwnProperty","$f6da4b2cbaf1787a$export$5c0c8aabba12399d","id","title","$f6da4b2cbaf1787a$export$b221ce5e4c9816db","option","removeAttribute","textContent","setAttribute","$f6da4b2cbaf1787a$export$8c1000bbdfb712c6","condition","$6f72ef53d33675a2$export$d6e937134f45ca6f","data","indexes","selectedItems","selected","nativOption","querySelectorAll","liChip","document","createElement","textNode","createTextNode","svgIcon","createElementNS","path1","path2","classList","add","appendChild","chips","addEventListener","event","stopPropagation","deleteIcon","indexOf","checkBox","splice","getElementById","checked","parentElement","remove","length","innerText","removeChild","$6f72ef53d33675a2$export$dfb0baf35876628e","nativSelect","$6f72ef53d33675a2$export$9e92aa12afe15aa6","list","options","items","category","this","constructor","init","render","initEvent","addItem","console","log","push","deleteItem","deleteItemAll","selectIndex","select","getElement","numberItem","disabled","buttonControl","button","method","open","close","multiselect","url","elem","Error","categoryItems","categoryItem","indexCategory","renderUrl","initSelected","select1","styles1","multiselect1","ulList","liItem","strongItem","type","text","filter","addOptionsBehaviour","async","url1","items1","multiselect2","response","fetch","json","name","ulUrl","liUrl","textUrl","oneClick","toggle","multiselect3","placeholder1","selected1","multiselectTag","options1","select2","ulMultipul","target","HTMLInputElement","checkIndex","tagItem"],"version":3,"file":"index.565b5911.js.map"}